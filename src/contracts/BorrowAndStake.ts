/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace BorrowAndStake {
  export type StakeStruct = {
    asset: BigNumberish;
    tokenId: BigNumberish;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type StakeStructOutput = [number, BigNumber, BigNumber, BigNumber] & {
    asset: number;
    tokenId: BigNumber;
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface BorrowAndStakeInterface extends utils.Interface {
  functions: {
    "CAR_BORROW_FEE()": FunctionFragment;
    "HIGH_VALUE()": FunctionFragment;
    "MEDIUM_VALUE()": FunctionFragment;
    "MIN_VALUE()": FunctionFragment;
    "PAY_TIME()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "REAL_STATE_BORROW_FEE()": FunctionFragment;
    "RWAcar()": FunctionFragment;
    "RWArealS()": FunctionFragment;
    "borrow(uint8,address)": FunctionFragment;
    "borrows(address)": FunctionFragment;
    "getStake(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "payBorrow(address)": FunctionFragment;
    "stakeCar(uint256,address)": FunctionFragment;
    "stakeRealState(uint256,uint256,address)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "stakingTime(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unstakeCar(address)": FunctionFragment;
    "unstakeRealState(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CAR_BORROW_FEE"
      | "HIGH_VALUE"
      | "MEDIUM_VALUE"
      | "MIN_VALUE"
      | "PAY_TIME"
      | "PRECISION"
      | "REAL_STATE_BORROW_FEE"
      | "RWAcar"
      | "RWArealS"
      | "borrow"
      | "borrows"
      | "getStake"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "payBorrow"
      | "stakeCar"
      | "stakeRealState"
      | "stakes"
      | "stakingTime"
      | "supportsInterface"
      | "unstakeCar"
      | "unstakeRealState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CAR_BORROW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HIGH_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_VALUE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PAY_TIME", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REAL_STATE_BORROW_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RWAcar", values?: undefined): string;
  encodeFunctionData(functionFragment: "RWArealS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "borrows", values: [string]): string;
  encodeFunctionData(functionFragment: "getStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "payBorrow", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeCar",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRealState",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(functionFragment: "stakingTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unstakeCar", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstakeRealState",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CAR_BORROW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HIGH_VALUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_VALUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PAY_TIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REAL_STATE_BORROW_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RWAcar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RWArealS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeCar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeRealState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeCar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeRealState",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BorrowAndStake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowAndStakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAR_BORROW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    HIGH_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEDIUM_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAY_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    REAL_STATE_BORROW_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    RWAcar(overrides?: CallOverrides): Promise<[string]>;

    RWArealS(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      _value: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrows(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountBorrowed: BigNumber;
        borrowFee: BigNumber;
        borrowedTimestamp: BigNumber;
      }
    >;

    getStake(
      _tba: string,
      overrides?: CallOverrides
    ): Promise<[BorrowAndStake.StakeStructOutput]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payBorrow(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeCar(
      _tokenId: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeRealState(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        asset: number;
        tokenId: BigNumber;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    stakingTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unstakeCar(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeRealState(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CAR_BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  HIGH_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  MEDIUM_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  PAY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  REAL_STATE_BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  RWAcar(overrides?: CallOverrides): Promise<string>;

  RWArealS(overrides?: CallOverrides): Promise<string>;

  borrow(
    _value: BigNumberish,
    _tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrows(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountBorrowed: BigNumber;
      borrowFee: BigNumber;
      borrowedTimestamp: BigNumber;
    }
  >;

  getStake(
    _tba: string,
    overrides?: CallOverrides
  ): Promise<BorrowAndStake.StakeStructOutput>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payBorrow(
    _tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeCar(
    _tokenId: BigNumberish,
    _tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeRealState(
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      asset: number;
      tokenId: BigNumber;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  stakingTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unstakeCar(
    _tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeRealState(
    _tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAR_BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    PAY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    REAL_STATE_BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    RWAcar(overrides?: CallOverrides): Promise<string>;

    RWArealS(overrides?: CallOverrides): Promise<string>;

    borrow(
      _value: BigNumberish,
      _tba: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrows(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountBorrowed: BigNumber;
        borrowFee: BigNumber;
        borrowedTimestamp: BigNumber;
      }
    >;

    getStake(
      _tba: string,
      overrides?: CallOverrides
    ): Promise<BorrowAndStake.StakeStructOutput>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    payBorrow(_tba: string, overrides?: CallOverrides): Promise<void>;

    stakeCar(
      _tokenId: BigNumberish,
      _tba: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeRealState(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _tba: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        asset: number;
        tokenId: BigNumber;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    stakingTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstakeCar(_tba: string, overrides?: CallOverrides): Promise<void>;

    unstakeRealState(_tba: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    CAR_BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    PAY_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    REAL_STATE_BORROW_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    RWAcar(overrides?: CallOverrides): Promise<BigNumber>;

    RWArealS(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      _value: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(_tba: string, overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payBorrow(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeCar(
      _tokenId: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeRealState(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakingTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstakeCar(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeRealState(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAR_BORROW_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HIGH_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAY_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REAL_STATE_BORROW_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RWAcar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RWArealS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      _value: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrows(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStake(
      _tba: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payBorrow(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeCar(
      _tokenId: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeRealState(
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstakeCar(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeRealState(
      _tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
