/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ManagementInterface extends utils.Interface {
  functions: {
    "createBankTBACard(address,uint256)": FunctionFragment;
    "createConnexusCard(address)": FunctionFragment;
    "importTBAAccount(address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeCollection(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBankCollection(address)": FunctionFragment;
    "setBankPermission(address,bool)": FunctionFragment;
    "setManager(address,bool)": FunctionFragment;
    "tokenizeCar(address,uint256,string)": FunctionFragment;
    "tokenizeRealState(address,uint256,string,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createBankTBACard"
      | "createConnexusCard"
      | "importTBAAccount"
      | "initialize"
      | "owner"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "removeCollection"
      | "renounceOwnership"
      | "setBankCollection"
      | "setBankPermission"
      | "setManager"
      | "tokenizeCar"
      | "tokenizeRealState"
      | "transferOwnership"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createBankTBACard",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createConnexusCard",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "importTBAAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBankCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBankPermission",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeCar",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeRealState",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createBankTBACard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createConnexusCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importTBAAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBankCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBankPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeCar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeRealState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "tbaAddr(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tbaAddr"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface tbaAddrEventObject {
  tba: string;
}
export type tbaAddrEvent = TypedEvent<[string], tbaAddrEventObject>;

export type tbaAddrEventFilter = TypedEventFilter<tbaAddrEvent>;

export interface Management extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createBankTBACard(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createConnexusCard(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    importTBAAccount(
      tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      connexusCard: string,
      rwaCar: string,
      rwaRealstate: string,
      cardTBAImplementation: string,
      erc6551Registry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeCollection(
      collection: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBankCollection(
      collection: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBankPermission(
      bank: string,
      permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setManager(
      manager: string,
      permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenizeCar(
      tba: string,
      numberChassi: BigNumberish,
      doclink: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenizeRealState(
      tba: string,
      number: BigNumberish,
      linkdoc: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  createBankTBACard(
    collection: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createConnexusCard(
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  importTBAAccount(
    tba: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    connexusCard: string,
    rwaCar: string,
    rwaRealstate: string,
    cardTBAImplementation: string,
    erc6551Registry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeCollection(
    collection: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBankCollection(
    collection: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBankPermission(
    bank: string,
    permission: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setManager(
    manager: string,
    permission: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenizeCar(
    tba: string,
    numberChassi: BigNumberish,
    doclink: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenizeRealState(
    tba: string,
    number: BigNumberish,
    linkdoc: string,
    fraction: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    createBankTBACard(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createConnexusCard(to: string, overrides?: CallOverrides): Promise<string>;

    importTBAAccount(tba: string, overrides?: CallOverrides): Promise<void>;

    initialize(
      connexusCard: string,
      rwaCar: string,
      rwaRealstate: string,
      cardTBAImplementation: string,
      erc6551Registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeCollection(
      collection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBankCollection(
      collection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBankPermission(
      bank: string,
      permission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(
      manager: string,
      permission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenizeCar(
      tba: string,
      numberChassi: BigNumberish,
      doclink: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenizeRealState(
      tba: string,
      number: BigNumberish,
      linkdoc: string,
      fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "tbaAddr(address)"(tba?: string | null): tbaAddrEventFilter;
    tbaAddr(tba?: string | null): tbaAddrEventFilter;
  };

  estimateGas: {
    createBankTBACard(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createConnexusCard(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    importTBAAccount(
      tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      connexusCard: string,
      rwaCar: string,
      rwaRealstate: string,
      cardTBAImplementation: string,
      erc6551Registry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollection(
      collection: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBankCollection(
      collection: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBankPermission(
      bank: string,
      permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setManager(
      manager: string,
      permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenizeCar(
      tba: string,
      numberChassi: BigNumberish,
      doclink: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenizeRealState(
      tba: string,
      number: BigNumberish,
      linkdoc: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createBankTBACard(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createConnexusCard(
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    importTBAAccount(
      tba: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      connexusCard: string,
      rwaCar: string,
      rwaRealstate: string,
      cardTBAImplementation: string,
      erc6551Registry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollection(
      collection: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBankCollection(
      collection: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBankPermission(
      bank: string,
      permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setManager(
      manager: string,
      permission: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenizeCar(
      tba: string,
      numberChassi: BigNumberish,
      doclink: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenizeRealState(
      tba: string,
      number: BigNumberish,
      linkdoc: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
